FILE: DatalogGrammars_GULP_PRODE94.ps.gz

\title{
Datalog Grammars
}

\author{
 Veronica Dahl\\ 
 Logic Programming Group and\\ 
 Computing Sciences Department\\
 Simon Fraser University\\
 \and
 Paul Tarau\\\
 D\'epartement d'Informatique \\ Universit\'e de Moncton\\
 and Logic Programming Group \\ Simon Fraser University\\\
 \and
 Yan-Nong Huang\\
 Logic Programming Group and\\
 Computing Sciences Department\\
 Simon Fraser University\\\
}

\date{}

\maketitle
       
\begin{abstract}
Datalog Grammars (DLGs) are a variant of Definite Clause Grammars
that do not use function symbols. For every given input phrase
and DCG-grammar we construct a Datalog program and a query
which succeeds if and only if the input sequence is recognized by
the original grammar.

Finiteness of the Herbrand Universe, under appropriate
execution strategies, ensures termination
of Datalog grammars. A reverse mapping from Datalog to
CF-grammars shows that in principle they have the same
computational power on given inputs (queries) of bounded
length.

Datalog grammars are more efficient than their DCG counterparts
under (terminating) OLDT-resolution
because the absence of compound terms
induces a smaller tabulation overhead.

A typical cross-fertilization from the field
of deductive databases is the use of incremental updates.
We show how the use of incremental techniques can be of benefit for the efficient evaluation of
Datalog grammars in a typical situation where
the input sequence is partially unknown and has to be guessed
from the syntactical and morphological context.

However, some of the advanced uses of DCGs that assume a list
representation for the {\tt connect/3} relation, cannot be recovered
by Datalog representation. We give some examples
and give sufficient conditions for the equivalence of the two
translations.

{\em Keywords: Logic grammars, Deductive Databases, Compilation of DCG-grammars to Datalog, CF-grammars, 
OLDT-resolution, Evaluation of Datalog programs}
\end{abstract}


-----------------------------------------------
FILE: LPwithMonads.ps.gz




\title{Logic Programming
with Monads and Comprehensions}

\author{
Yves Bekkers~\thanks{
   Universit\'e de Rennes I and IRISA/INRIA Rennes,
   {\em bekkers@irisa.fr}
}
\and
 Paul Tarau~\thanks{
 D\'epartement d'Informatique,
   Universit\'e de Moncton,
 {\em tarau@info.umoncton.ca}
}
}

\date{}

\maketitle

\begin{abstract}

We give a logical reconstruction of all-solution predicates
in terms of list comprehensions in $\lambda$Prolog's and we describe a variety of logic programming
constructs in terms of monads and monad morphisms.
Novel monad structures are described for lazy function lists,
clause unfoldings and a monad morphism
based embedding of Prolog in $\lambda$Prolog is given.

{\em Keywords: 
{\em computing paradigms, logic programming, monads,}
list comprehensions,  all solution predicates,
$\lambda$Prolog, higher-order unification,
lazy function lists.}
\end{abstract}


-----------------------------------------------
FILE: HighOrderOrStyleLP.ps.gz

\title{\
  Higher-Order Programming in an OR-intensive Style
}

\author{
   Paul Tarau\\\
   D\'ept. d'Informatique \\ 
  Universit\'e de Moncton\\
  tarau@info.umoncton.ca\\\
\and
   Bart Demoen\\\
   Dept. of Computer Science\\ 
   Katholieke Universiteit Leuven\\
   bimbart@cs.kuleuven.ac.be\\\
}
\date{}

\maketitle

\begin{abstract}
Because implementations tend to favour a recursive deterministic AND-intensive programming style, it seems counter intuitive that a backtracking {\tt findall}-based paradigm can be more efficient. This is explained by a source level technique which is called {\em goal precomputation}, by a heap-based copy-once findall and optimized meta predicates. A precomputed goal containing a future (reusable)
computation is backtracked over instead of being constructed repeatedly. 
These techniques are enough, in terms of efficiency,
to rehabilitate a generator based OR-intensive programming style.

On the other side, we will try to find out 
how to improve the traditional AND-intensive implementation
of higher-order primitives and study the impact
of meta-programming constructs like {\tt call/N}. 

We introduce a new `universal' higher-order predicate
implemented also with {\em goal precomputation} which
combines on the fly selected answers from a generator.
By using it for the executable specification
of key higher-order Prolog constructs, we point out
the (unsuspected) expressive power of a pure
OR-intensive programming style.

{\em Keywords:} design and implementation of 
language facilities for higher-order programming,
optimization of logic programming engines, WAM,
continuation passing binary logic programs.
\end{abstract}

